[
    { "comment": "blur arrays and objects",
      "doc": { "foo": 1 },
      "patch": [ { "op": "add", "path": "/1", "value": 2 } ],
      "expected": { "foo": 1, "1": 2 } },

    { "comment": "THESE TESTS SHOULD BE PUSHED UPSTREAM" },

    { "comment": "missing 'value' parameter to add",
      "doc": [ 1 ],
      "patch": [ { "op": "add", "path": "/-" } ],
      "error": "add operation is missing value parameter" },

    { "comment": "missing 'value' parameter to replace",
      "doc": [ 1 ],
      "patch": [ { "op": "replace", "path": "/0" } ],
      "error": "test operation is missing value parameter" },

    { "comment": "missing 'value' parameter to test",
      "doc": [ null ],
      "patch": [ { "op": "test", "path": "/0" } ],
      "error": "test operation is missing value parameter" },

    { "comment": "missing value parameter to test - impls where undef is falsy",
      "doc": [ false ],
      "patch": [ { "op": "test", "path": "/0" } ],
      "error": "test operation is missing value parameter" },

    { "comment": "missing from parameter to copy",
      "doc": [ 1 ],
      "patch": [ { "op": "copy", "path": "/-" } ],
      "error": "copy operation is missing from parameter" },

    { "comment": "missing from parameter to move",
      "doc": { "foo": 1 },
      "patch": [ { "op": "move", "path": "" } ],
      "error": "move operation is missing from parameter" },

    { "comment": "duplicate ops",
      "doc": { "foo": "bar" },
      "patch": [ { "op": "add", "path": "/baz", "value": "qux",
                   "op": "move", "from":"/foo" } ],
      "error": "operation has two 'op' members",
      "disabled": true },

    { "comment": "Adding to \"/-\" adds to the end of the array (ADD BECAUSE SIMPLER)",
      "doc": [ 1, 2 ],
      "patch": [ { "op": "add", "path": "/-", "value": 3 } ],
      "expected": [ 1, 2, 3 ] },

    { "comment": "move target can use '-'?",
      "doc": { "to":[ 1, 2 ], "from": 3 },
      "patch": [ { "op": "move", "from":"/from", "path": "/to/-" } ],
      "expected": { "to":[ 1, 2, 3 ] } },

    { "comment": "copy target can use '-'?",
      "doc": { "to":[ 1, 2 ], "from": 3 },
      "patch": [ { "op": "copy", "from":"/from", "path": "/to/-" } ],
      "expected": { "to":[ 1, 2, 3 ], "from": 3 } },

    { "comment": "replace target must exist",
      "doc": {"foo": "bar"},
      "patch": [{"op": "replace", "path": "/baz", "value": "sil"}],
      "error": "replace target not already set" },

    { "comment": "what should this behavior be?"},
    { "comment": "- as remove target",
      "doc": [1, 2],
      "patch": [{"op": "remove", "path": "/-"}],
      "expected": [1], "disabled":true },

    { "comment": "what should this behavior be?"},
    { "comment": "toplevel as remove target",
      "doc": [1],
      "patch": [{"op": "remove", "path": ""}],
      "error": "Can't remove whole document" },

    { "comment": "unrecognized op should fail (4.1)",
      "doc": {"foo": 1},
      "patch": [{"op": "spam", "path": "/foo", "value": 1}],
      "error": "Unrecognized op 'spam'" },

    { "doc": [""],
      "patch": [{"op": "replace", "path": "/0", "value": ""}],
      "expected": [""] },

    { "comment": "replace patches in below with simpler toplevel doc add" },
    { "comment": "Ok to have doc as toplevel string?",
      "doc": 1,
      "patch": [{"op": "replace", "path": "", "value": "bar"}],
      "expected": "bar" },

    { "comment": "Ok to have doc as toplevel number?",
      "doc": 1,
      "patch": [{"op": "replace", "path": "", "value": 1}],
      "expected": 1 },

    { "comment": "try these with more kinds of values" },

    { "comment": "Ok to have result doc as toplevel string? (THINKNO)",
      "doc": [ 1 ],
      "patch": [{"op": "replace", "path": "", "value": "bar"}],
      "expected": "bar" },

    { "comment": "'add' should replace existing member if it already exists",
      "doc": { "foo": 1 },
      "patch": [{"op": "add", "path": "/foo", "value": 2 }],
      "expected": { "foo": 2 } },


    { "comment": "test op with string at toplevel",
      "doc": "foo",
      "patch": [{"op": "test", "path":"", "value": "foo"}] },
      
    { "comment": "test op with number at toplevel",
      "doc": 1,
      "patch": [{"op": "test", "path":"", "value": 1}] },
      
    { "comment": "test op with false at toplevel",
      "doc": false,
      "patch": [{"op": "test", "path":"", "value": false}] },

    { "comment": "test op with true at toplevel",
      "doc": true,
      "patch": [{"op": "test", "path":"", "value": true}] },

    { "comment": "test op with null at toplevel",
      "doc": null,
      "patch": [{"op": "test", "path":"", "value": null}] },

    { "comment": "test null != false",
      "doc": null,
      "patch": [{"op": "test", "path":"", "value": false}],
      "error": "expected false value not found" },

    { "comment": "test false != null",
      "doc": false,
      "patch": [{"op": "test", "path":"", "value": null}],
      "error": "expected null value not found" },

    { "comment": "test emptystr != false",
      "doc": "",
      "patch": [{"op": "test", "path":"", "value": false}],
      "error": "expected false value not found" },

    { "comment": "test false != emptystr",
      "doc": false,
      "patch": [{"op": "test", "path":"", "value": ""}],
      "error": "expected empty string value not found" },

    { "comment": "THESE BELOW ARE FAILURES" },

    { "comment": "should have at least one test with 01" },

    { "comment": "bad number (in intermediate path location)",
      "doc": [[0,[1]]],
      "patch": [{"op": "test", "path": "/0/1e0/0", "value": 1}],
      "error": "path '/0/1e0/0' not found in doc" },

    { "comment": "bad number (in intermediate path location)",
      "doc": [[0,[1]]],
      "patch": [{"op": "test", "path": "/0/01/0", "value": 1}],
      "error": "path '/0/01/0' not found in doc" },

    { "comment": "Don't convert number representation for object lookup",
      "doc": { "1e0": 1 },
      "patch": [{"op": "test", "path": "/1", "value": 1}],
      "error": "path '/1' not found in doc" },

    { "comment": "test remove with bad number should fail",
      "doc": {"foo": 1, "baz": [{"qux": "hello"}]},
      "patch": [{"op": "remove", "path": "/baz/1e0/qux"}],
      "error": "remove op shouldn't remove from array with bad number" },

    { "comment": "test replace with bad number should fail",
      "doc": [1, 2],
      "patch": [{"op": "replace", "path": "/1e0", "value": false}],
      "error": "replace op shouldn't replace in array with bad number" },

    { "comment": "test copy with bad number should fail AND ERROR IS INCORRECT",
      "doc": {"baz": [1,2,3], "bar": 1},
      "patch": [{"op": "copy", "from": "/baz/1e0", "path": "/boo"}],
      "error": "copy op shouldn't work with bad number" },

    { "comment": "test move with bad number should fai",
      "doc": {"foo": 1, "baz": [1,2,3,4]},
      "patch": [{"op": "move", "from": "/baz/1e0", "path": "/foo"}],
      "error": "move op shouldn't work with bad number" },


    { "comment": "null within string",
      "doc": [ "foo\u0000foo" ],
      "patch": [{"op":"test", "path":"/0", "value":"foo\u0000foo"}] },

    { "comment": "null string",
      "doc": [ "\u0000" ],
      "patch": [{"op":"test", "path":"/0", "value":"\u0000"}] },

    { "comment": "null in key",
      "doc": { "foo\u0000foo": 1 },
      "patch": [{"op":"replace", "path":"/foo\u0000foo", "value":2}],
      "expected": { "foo\u0000foo": 2 } },

    { "comment": "null in key - test against prefix",
      "doc": { "foo": 1, "foo\u0000foo": 2 },
      "patch": [{"op":"test", "path":"/foo\u0000foo", "value":2}] },

    { "comment": "null in key - trailing",
      "doc": { "foo": 1, "foo\u0000": 2 },
      "patch": [{"op":"test", "path":"/foo\u0000", "value":2}] },

    { "comment": "null as key - this is a PHP Fatal error",
      "doc": { "\u0000": 1 },
      "patch": [{"op":"replace", "path":"/\u0000", "value":2}],
      "expected": { "\u0000": 2 },
      "disabled": true
    },

    { "comment": "copy doc onto child",
      "doc": { "foo": 1 },
      "patch": [{"op":"copy", "from":"", "path":"/bar"}],
      "expected": { "foo": 1, "bar": { "foo": 1 }} },

    { "comment": "move doc onto child (from location must not be proper prefix)",
      "doc": { "foo": { "bar": 1 } },
      "patch": [{"op":"move", "from":"/foo", "path":"/foo/bar"}],
      "error": "location not in target doc (already removed)"},


    { "comment": "need bounds check on intermediate path",
      "doc": [1, [2]],
      "patch": [{"op": "test", "path":"/2/0", "value": 2}],
      "error": "path '/2/0' not in target doc" },

    { "comment": "'-' should be legit member for assoc array",
      "doc": {"foo": 1},
      "patch": [{"op": "add", "path":"/-", "value": 2}],
      "expected": {"foo": 1, "-": 2} },


    { "comment": "last" }
]
